@using Capstone.Models.ViewModels;
@model HomeViewModel

<div id="carouselExampleSlidesOnly" class="carousel slide" data-bs-ride="carousel" style="position: relative;">
    <div class="carousel-inner">

        @foreach (var anime in Model.Carousel)
        {
            <div class="carousel-item">
                <img src="@anime.CoverImage" class="CarouselImage" />
            </div>

        }
    </div>
    <div class="CarouselText">
        <h1 class="mb-5">Aniverse</h1>
        <div class="CarouselParagraphBox">
            <div>
                <h3>Discover</h3>
                <p class="CarouselParagraph">Look up any title you want, or follow our charts, recommendations, and in-depth statistics to find the best titles for you. </p>
            </div>
            <div>
                <h3>Community</h3>
                <p class="CarouselParagraph">Create your own anime list and track progress over time. Discuss upcoming titles with your friends and share opinions and recommendations.</p>
            </div>
        </div>
    </div>
</div>
<div class="mt-5">
    @if (Model.Trending.Count != 0)
    {
        <h2 class="text-center TitleHighlight">Trending</h2>
        <div class="SearchResultsContainer">
            @await Component.InvokeAsync("SearchCard", new { list = Model.Trending })
        </div>
    }

    @if (Model.CurrentSeason.Count != 0)
    {
        <h2 class="text-center TitleHighlight">Popular this season</h2>
        <div class="SearchResultsContainer">
            @await Component.InvokeAsync("SearchCard", new { list = Model.CurrentSeason })
        </div>
    }

    @if (Model.NextSeason.Count != 0)
    {
        <h2 class="text-center TitleHighlight">Upcoming</h2>
        <div class="SearchResultsContainer">
            @await Component.InvokeAsync("SearchCard", new { list = Model.NextSeason })
        </div>
    }

    @if (Model.Score.Count != 0)
    {
        <h2 class="text-center TitleHighlight">All Time Favourites</h2>
        <div class="SearchResultsContainer">
            @await Component.InvokeAsync("SearchCard", new { list = Model.Score })
        </div>
    }
</div>

@section scripts {
    <script type="text/javascript">
        const active = document.querySelector(".carousel-item")
        if (active) {
            active.classList.add("active");
        }
        const cards = document.querySelectorAll(".SearchImgContainer")
        for (card of cards) {

            card.addEventListener("mouseover", function () {
                let info = document.getElementById(`r${this.id}`)

                info.classList.toggle("ToggleDisplayUniversal")
            })
            card.addEventListener("mouseout", function () {
                let info = document.getElementById(`r${this.id}`)

                info.classList.toggle("ToggleDisplayUniversal")
            })
        }

    </script>
}
